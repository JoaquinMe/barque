#!/bin/bash
# Run full Barque pipeline

# Scripts 04 and 05, which look at the presence of chimeras, are not necessary
# to obtain the final results. It is a good idea however to run them in order to
# validate the absence of chimeras in the reads. The 05 script may demand a very
# high amount of memory and computing time for large files (above one million
# sequences).

# Copy script and config files as they were run
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
SCRIPT=$0
SCRIPT_NAME=$(basename "$SCRIPT")
CONFIG_FILE=$1
CONFIG_FILENAME=$(basename "$CONFIG_FILE")
LOG_FOLDER="00_archive/log_files"
RESULT_FOLDER="12_results"

print_logo () {
    echo ""
    echo '        |    |    |'
    echo '       )_)  )_)  )_)'
    echo '      )___))___))___)\'
    echo '     )____)____)_____)\\'
    echo '   _____|____|____|____\\\__'
    echo '   \    BARQUE v1.4    /'
    echo '^^^^^^^^^^^^^^^^^^^^^^^^^^^^^'
    echo "^^^   ^^^^^^    ^^^^^^  ^^^^^"
}

print_logo

# Import configfile and keep copy in 00_archive/log_files
if [ -e "$CONFIG_FILE" -a -s "$CONFIG_FILE" ]
then
    source "$CONFIG_FILE"
    cp "$CONFIG_FILE" "$LOG_FOLDER"/"$TIMESTAMP"_"$CONFIG_FILENAME"
    cp 02_info/primers.csv "$LOG_FOLDER"/"$TIMESTAMP"_primers.csv

else
    echo -e "\nBARQUE: Config file does not exist or is empty."
    echo -e "        Please specify a valid config file."
    exit 1
fi

# Validate that database and samples are present
if ! ./01_scripts/00_validate_project.sh
then
    exit 1
fi

# Data preparation
if [ "$SKIP_DATA_PREP" == "0" ]
then
    echo -e "\nBARQUE: Preparing data"

    # Trim and clean reads
    echo -e "\nBARQUE: Trimming and filtering reads"
    ./01_scripts/01_trim.sh "$NCPUS" "$MIN_HIT_LENGTH"

    # Merge forward and reverse reads
    echo -e "\nBARQUE: Merging forward and reverse reads"
    ./01_scripts/02_merge.sh "$NCPUS" "$MIN_OVERLAP" "$MAX_OVERLAP"

    # Split samples by amplicon
    echo -e "\nBARQUE: Splitting samples by amplicon"
    ./01_scripts/03_split_amplicons.sh "$NCPUS"

elif [ "$SKIP_DATA_PREP" == "1" ]
then
    echo -e "\nBARQUE: Skipping data preparation"

else
    echo -e "\nWARNING: Invalid value in config file for SKIP_DATA_PREP"
fi

# Look for chimeras
./01_scripts/05_chimeras.sh "$NCPUS" "$SKIP_CHIMERA_DETECTION"

# Run vsearch
echo -e "\nBARQUE: Running vsearch"
./01_scripts/06_vsearch.sh "$MAX_ACCEPTS" "$MAX_REJECTS" "$QUERY_COV" "$NCPUS"

# Find multiple hits
echo -e "\nBARQUE: Finding multiple hits"
for db in $(cat 02_info/primers.csv | grep -v "^#" | cut -d "," -f 6 | sort -u)
do
    ./01_scripts/util/find_multiple_hits.py 09_vsearch/ "$db" "$RESULT_FOLDER"/multiple_hits_"$db".csv
done

# Summarize results
echo -e "\nBARQUE: Summarizing results"
./01_scripts/07_summarize_results.py 09_vsearch/ "$RESULT_FOLDER"/ 02_info/primers.csv \
    "$SIMILARITY_VSEARCH" "$MIN_HIT_LENGTH" "$MIN_HITS_SAMPLE"

# Looking at sequence dropout
echo -e "\nBARQUE: Looking at sequence dropout"
./01_scripts/08_summarize_read_dropout.sh

# Finding most frequent non-annotated sequences
echo -e "\nBARQUE: Finding most frequent non-annotated sequences"
./01_scripts/09_get_most_frequent_non_annotated_sequences.sh "$NUM_NON_ANNOTATED_SEQ" "$NCPUS"
